/* The following code was generated by JFlex 1.4.3 on 10/04/13 03:31 PM */

package Analisis_Sintactico;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/04/13 03:31 PM from the specification file
 * <tt>C:/Users/Nookie/Desktop/Compilador/src/Analisis_Sintactico/GP_prueba.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\46\1\14"+
    "\1\0\1\7\1\0\1\55\1\12\1\56\1\57\1\5\1\50\1\65"+
    "\1\51\1\17\1\4\1\11\11\10\1\0\1\64\1\52\1\47\1\53"+
    "\2\0\22\6\1\23\7\6\1\62\1\15\1\63\1\0\1\6\1\0"+
    "\1\32\1\26\1\33\1\40\1\31\1\16\1\25\1\34\1\20\2\6"+
    "\1\30\1\41\1\21\1\27\1\45\1\6\1\24\1\36\1\22\1\35"+
    "\1\37\1\43\1\42\1\44\1\6\1\60\1\54\1\61\44\0\4\13"+
    "\4\0\1\13\12\0\1\13\4\0\1\13\5\0\27\13\1\0\37\13"+
    "\1\0\u01ca\13\4\0\14\13\16\0\5\13\7\0\1\13\1\0\1\13"+
    "\201\0\5\13\1\0\2\13\2\0\4\13\10\0\1\13\1\0\3\13"+
    "\1\0\1\13\1\0\24\13\1\0\123\13\1\0\213\13\10\0\236\13"+
    "\11\0\46\13\2\0\1\13\7\0\47\13\110\0\33\13\5\0\3\13"+
    "\30\0\1\13\24\0\53\13\43\0\2\13\1\0\143\13\1\0\1\13"+
    "\17\0\2\13\7\0\2\13\12\0\3\13\2\0\1\13\20\0\1\13"+
    "\1\0\36\13\35\0\131\13\13\0\1\13\30\0\41\13\11\0\2\13"+
    "\4\0\1\13\5\0\26\13\4\0\1\13\11\0\1\13\3\0\1\13"+
    "\27\0\31\13\253\0\66\13\3\0\1\13\22\0\1\13\7\0\12\13"+
    "\17\0\7\13\1\0\7\13\5\0\10\13\2\0\2\13\2\0\26\13"+
    "\1\0\7\13\1\0\1\13\3\0\4\13\3\0\1\13\20\0\1\13"+
    "\15\0\2\13\1\0\3\13\16\0\4\13\7\0\1\13\11\0\6\13"+
    "\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\2\13"+
    "\1\0\2\13\37\0\4\13\1\0\1\13\23\0\3\13\20\0\11\13"+
    "\1\0\3\13\1\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13"+
    "\3\0\1\13\22\0\1\13\17\0\2\13\17\0\1\13\23\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13"+
    "\3\0\1\13\36\0\2\13\1\0\3\13\17\0\1\13\21\0\1\13"+
    "\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13"+
    "\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13\26\0\1\13"+
    "\50\0\1\13\13\0\10\13\1\0\3\13\1\0\27\13\1\0\12\13"+
    "\1\0\5\13\3\0\1\13\32\0\2\13\6\0\2\13\43\0\10\13"+
    "\1\0\3\13\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13"+
    "\40\0\1\13\1\0\2\13\17\0\2\13\22\0\10\13\1\0\3\13"+
    "\1\0\51\13\2\0\1\13\20\0\1\13\21\0\2\13\30\0\6\13"+
    "\5\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0\7\13"+
    "\72\0\60\13\1\0\2\13\13\0\10\13\72\0\2\13\1\0\1\13"+
    "\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13"+
    "\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\4\13"+
    "\1\0\2\13\11\0\1\13\2\0\5\13\1\0\1\13\25\0\2\13"+
    "\42\0\1\13\77\0\10\13\1\0\44\13\33\0\5\13\163\0\53\13"+
    "\24\0\1\13\20\0\6\13\4\0\4\13\3\0\1\13\3\0\2\13"+
    "\7\0\3\13\4\0\15\13\14\0\1\13\21\0\46\13\12\0\53\13"+
    "\1\0\1\13\3\0\u0149\13\1\0\4\13\2\0\7\13\1\0\1\13"+
    "\1\0\4\13\2\0\51\13\1\0\4\13\2\0\41\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\17\13\1\0\71\13"+
    "\1\0\4\13\2\0\103\13\45\0\20\13\20\0\125\13\14\0\u026c\13"+
    "\2\0\21\13\1\0\32\13\5\0\113\13\3\0\3\13\17\0\15\13"+
    "\1\0\4\13\16\0\22\13\16\0\22\13\16\0\15\13\1\0\3\13"+
    "\17\0\64\13\43\0\1\13\3\0\2\13\103\0\130\13\10\0\51\13"+
    "\1\0\1\13\5\0\106\13\12\0\35\13\63\0\36\13\2\0\5\13"+
    "\13\0\54\13\25\0\7\13\70\0\27\13\11\0\65\13\122\0\1\13"+
    "\135\0\57\13\21\0\7\13\67\0\36\13\15\0\2\13\20\0\46\13"+
    "\32\0\44\13\51\0\3\13\12\0\44\13\153\0\4\13\1\0\4\13"+
    "\16\0\300\13\100\0\u0116\13\2\0\6\13\2\0\46\13\2\0\6\13"+
    "\2\0\10\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0\37\13"+
    "\2\0\65\13\1\0\7\13\1\0\1\13\3\0\3\13\1\0\7\13"+
    "\3\0\4\13\2\0\6\13\4\0\15\13\5\0\3\13\1\0\7\13"+
    "\102\0\2\13\23\0\1\13\34\0\1\13\15\0\1\13\20\0\15\13"+
    "\3\0\32\13\110\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13"+
    "\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0\4\13"+
    "\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13\21\0\51\13"+
    "\u0a77\0\57\13\1\0\57\13\1\0\205\13\6\0\4\13\21\0\46\13"+
    "\12\0\66\13\11\0\1\13\20\0\27\13\11\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\1\0\7\13\120\0\1\13\u01d5\0\3\13\31\0\11\13\7\0\5\13"+
    "\2\0\5\13\4\0\126\13\6\0\3\13\1\0\132\13\1\0\4\13"+
    "\5\0\51\13\3\0\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13"+
    "\112\0\u51cc\13\64\0\u048d\13\103\0\56\13\2\0\u010d\13\3\0\20\13"+
    "\12\0\2\13\24\0\57\13\20\0\31\13\10\0\120\13\47\0\11\13"+
    "\2\0\147\13\2\0\4\13\1\0\2\13\16\0\12\13\120\0\10\13"+
    "\1\0\3\13\1\0\4\13\1\0\27\13\25\0\1\13\7\0\64\13"+
    "\16\0\62\13\76\0\6\13\3\0\1\13\16\0\34\13\12\0\27\13"+
    "\31\0\35\13\7\0\57\13\34\0\1\13\60\0\51\13\27\0\3\13"+
    "\1\0\10\13\24\0\27\13\3\0\1\13\5\0\60\13\1\0\1\13"+
    "\3\0\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\0\3\13"+
    "\43\0\6\13\2\0\6\13\2\0\6\13\11\0\7\13\1\0\7\13"+
    "\221\0\43\13\35\0\u2ba4\13\14\0\27\13\4\0\61\13\u2104\0\u012e\13"+
    "\2\0\76\13\2\0\152\13\46\0\7\13\14\0\5\13\5\0\1\13"+
    "\1\0\12\13\1\0\15\13\1\0\5\13\1\0\1\13\1\0\2\13"+
    "\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0\66\13"+
    "\50\0\15\13\66\0\2\13\30\0\3\13\31\0\1\13\6\0\5\13"+
    "\1\0\207\13\7\0\1\13\34\0\32\13\4\0\1\13\1\0\32\13"+
    "\13\0\131\13\3\0\6\13\2\0\6\13\2\0\6\13\2\0\3\13"+
    "\3\0\2\13\3\0\2\13\31\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\1\2\5\3\1"+
    "\1\6\17\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\2\1\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\0\1\30\1\0\1\31"+
    "\4\0\1\32\1\0\2\30\1\33\1\34\23\30\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\2\0\1\47\2\30\1\50\1\30\1\51\7\30"+
    "\1\52\13\30\1\0\4\30\1\53\1\54\3\30\1\55"+
    "\2\30\1\56\1\57\2\30\1\60\1\30\1\61\1\62"+
    "\2\30\1\63\1\64\10\30\1\65\1\30\1\66\1\30"+
    "\1\67\1\30\1\70\1\71\1\72\1\30\1\73\1\30"+
    "\1\74\2\30\1\75\1\76\1\77\2\30\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\154\0\330\0\154\0\u010e"+
    "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\154\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\154\0\154\0\u061e\0\u0654\0\u068a\0\u06c0\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\154\0\u06f6\0\154"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0144\0\u0804\0\u01b0\0\u083a"+
    "\0\u01e6\0\u021c\0\154\0\u0870\0\u08a6\0\u08dc\0\u07ce\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\u0d4a\0\u0d80\0\154"+
    "\0\u0db6\0\u0dec\0\u07ce\0\u0e22\0\u07ce\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u07ce\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee"+
    "\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u07ce\0\u07ce\0\u1332"+
    "\0\u1368\0\u139e\0\u07ce\0\u13d4\0\u140a\0\u07ce\0\u07ce\0\u1440"+
    "\0\u1476\0\u07ce\0\u14ac\0\u07ce\0\u07ce\0\u14e2\0\u1518\0\u07ce"+
    "\0\u07ce\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u07ce\0\u16fe\0\u07ce\0\u1734\0\u07ce\0\u176a\0\u07ce"+
    "\0\u07ce\0\u07ce\0\u17a0\0\u07ce\0\u17d6\0\u07ce\0\u180c\0\u1842"+
    "\0\u07ce\0\u07ce\0\u07ce\0\u1878\0\u18ae\0\u07ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\3\1\15\1\3\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\1\10\1\31\2\10\1\32\1\33\1\10\1\34"+
    "\1\10\1\35\1\10\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\2\3\11\57\1\60"+
    "\1\61\50\57\70\0\1\5\67\0\1\62\1\63\60\0"+
    "\7\64\1\0\56\64\6\0\1\64\1\65\2\64\4\0"+
    "\1\64\1\0\26\64\30\0\2\12\5\0\1\66\56\0"+
    "\2\67\5\0\1\66\54\0\2\70\2\0\1\71\1\70"+
    "\2\0\1\70\1\0\26\70\20\0\1\72\2\0\11\72"+
    "\1\73\1\74\50\72\7\64\1\0\20\64\1\75\1\64"+
    "\1\76\42\64\1\0\6\64\1\77\2\64\1\100\17\64"+
    "\1\101\33\64\1\0\21\64\1\102\43\64\1\0\14\64"+
    "\1\103\7\64\1\104\40\64\1\0\12\64\1\105\21\64"+
    "\1\106\30\64\1\0\21\64\1\107\43\64\1\0\17\64"+
    "\1\110\45\64\1\0\25\64\1\111\37\64\1\0\21\64"+
    "\1\112\43\64\1\0\20\64\1\113\11\64\1\114\32\64"+
    "\1\0\20\64\1\115\3\64\1\116\40\64\1\0\12\64"+
    "\1\117\52\64\1\0\17\64\1\120\45\64\1\0\22\64"+
    "\1\121\42\64\1\0\24\64\1\122\40\64\1\0\14\64"+
    "\1\123\41\64\47\0\1\124\65\0\1\125\65\0\1\126"+
    "\65\0\1\127\72\0\1\130\66\0\1\131\10\0\1\57"+
    "\2\0\11\57\2\0\50\57\14\0\1\132\4\0\1\133"+
    "\1\134\1\0\1\135\41\0\1\62\1\4\1\5\63\62"+
    "\5\136\1\137\60\136\6\0\1\64\1\0\2\64\4\0"+
    "\1\64\1\0\26\64\30\0\2\66\62\0\2\70\2\0"+
    "\1\140\1\70\2\0\1\70\1\0\26\70\32\0\1\72"+
    "\1\0\3\72\2\0\2\72\1\0\1\72\1\0\1\72"+
    "\45\0\1\64\1\0\2\64\4\0\1\64\1\0\7\64"+
    "\1\141\16\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\10\64\1\142\15\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\2\64\1\143\23\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\25\64\1\144\26\0"+
    "\1\64\1\0\2\64\4\0\1\64\1\0\23\64\1\145"+
    "\2\64\26\0\1\64\1\0\2\64\4\0\1\64\1\0"+
    "\15\64\1\146\10\64\26\0\1\64\1\0\2\64\4\0"+
    "\1\64\1\0\1\147\25\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\4\64\1\150\21\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\16\64\1\151\7\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\2\64"+
    "\1\152\7\64\1\153\13\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\7\64\1\154\16\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\2\64\1\155\23\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\1\64"+
    "\1\156\24\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\16\64\1\157\7\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\1\160\1\64\1\161\23\64\26\0"+
    "\1\64\1\0\2\64\4\0\1\64\1\0\12\64\1\162"+
    "\13\64\26\0\1\64\1\0\2\64\4\0\1\64\1\0"+
    "\12\64\1\163\13\64\26\0\1\64\1\0\2\64\4\0"+
    "\1\64\1\0\12\64\1\164\13\64\26\0\1\64\1\0"+
    "\2\64\4\0\1\64\1\0\1\165\25\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\1\166\25\64\26\0"+
    "\1\64\1\0\2\64\4\0\1\64\1\0\1\167\25\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\1\170"+
    "\25\64\20\0\5\136\1\171\60\136\4\0\1\5\1\137"+
    "\66\0\1\64\1\0\2\64\4\0\1\64\1\0\12\64"+
    "\1\172\13\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\16\64\1\173\7\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\7\64\1\174\1\175\15\64\26\0"+
    "\1\64\1\0\2\64\4\0\1\64\1\0\11\64\1\176"+
    "\14\64\26\0\1\64\1\0\2\64\4\0\1\64\1\0"+
    "\16\64\1\177\7\64\26\0\1\64\1\0\2\64\4\0"+
    "\1\64\1\0\1\200\25\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\2\64\1\201\23\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\15\64\1\202\10\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\20\64"+
    "\1\203\5\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\10\64\1\204\15\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\5\64\1\205\20\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\11\64\1\206\14\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\2\64"+
    "\1\207\23\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\11\64\1\210\14\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\16\64\1\211\7\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\4\64\1\212\21\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\2\64"+
    "\1\213\23\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\20\64\1\214\5\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\1\64\1\215\24\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\10\64\1\216\15\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\1\64"+
    "\1\217\24\64\20\0\4\136\1\5\1\171\60\136\6\0"+
    "\1\64\1\0\2\64\4\0\1\64\1\0\2\64\1\220"+
    "\23\64\26\0\1\64\1\0\2\64\4\0\1\64\1\0"+
    "\11\64\1\221\14\64\26\0\1\64\1\0\2\64\4\0"+
    "\1\64\1\0\4\64\1\222\21\64\26\0\1\64\1\0"+
    "\2\64\4\0\1\64\1\0\11\64\1\223\14\64\26\0"+
    "\1\64\1\0\2\64\4\0\1\64\1\0\1\64\1\224"+
    "\24\64\26\0\1\64\1\0\2\64\4\0\1\64\1\0"+
    "\11\64\1\225\14\64\26\0\1\64\1\0\2\64\4\0"+
    "\1\64\1\0\4\64\1\226\21\64\26\0\1\64\1\0"+
    "\2\64\4\0\1\64\1\0\11\64\1\227\14\64\26\0"+
    "\1\64\1\0\2\64\4\0\1\64\1\0\2\64\1\230"+
    "\23\64\26\0\1\64\1\0\2\64\4\0\1\64\1\0"+
    "\1\64\1\231\24\64\26\0\1\64\1\0\2\64\4\0"+
    "\1\64\1\0\16\64\1\232\7\64\26\0\1\64\1\0"+
    "\2\64\4\0\1\64\1\0\1\233\25\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\11\64\1\234\14\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\2\64"+
    "\1\235\23\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\2\64\1\236\23\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\21\64\1\237\4\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\5\64\1\240\20\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\21\64"+
    "\1\241\4\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\1\64\1\242\24\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\12\64\1\243\13\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\14\64\1\244\11\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\20\64"+
    "\1\245\5\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\13\64\1\246\12\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\10\64\1\247\15\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\11\64\1\250\14\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\1\64"+
    "\1\251\24\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\16\64\1\252\7\64\26\0\1\64\1\0\2\64"+
    "\4\0\1\64\1\0\1\64\1\253\24\64\26\0\1\64"+
    "\1\0\2\64\4\0\1\64\1\0\1\64\1\254\24\64"+
    "\26\0\1\64\1\0\2\64\4\0\1\64\1\0\2\64"+
    "\1\255\23\64\26\0\1\64\1\0\2\64\4\0\1\64"+
    "\1\0\16\64\1\256\7\64\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6372];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\7\1\1\11"+
    "\21\1\2\11\4\1\10\11\1\1\1\11\1\1\2\0"+
    "\1\1\1\0\1\1\4\0\1\11\1\0\27\1\12\11"+
    "\2\0\1\11\30\1\1\0\65\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[174];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1650) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 65: break;
        case 33: 
          { return symbol(sym.TO);
          }
        case 66: break;
        case 27: 
          { return symbol(sym.TIf);
          }
        case 67: break;
        case 45: 
          { return symbol(sym.TRead);
          }
        case 68: break;
        case 14: 
          { return symbol(sym.TParDer);
          }
        case 69: break;
        case 18: 
          { return symbol(sym.TCorDer);
          }
        case 70: break;
        case 12: 
          { return symbol(sym.TMayor);
          }
        case 71: break;
        case 28: 
          { return symbol(sym.TIn);
          }
        case 72: break;
        case 64: 
          { return symbol(sym.TImplements);
          }
        case 73: break;
        case 37: 
          { string.append('\t');
          }
        case 74: break;
        case 16: 
          { return symbol(sym.TLlaveDer);
          }
        case 75: break;
        case 11: 
          { return symbol(sym.TMenor);
          }
        case 76: break;
        case 56: 
          { return symbol(sym.TString);
          }
        case 77: break;
        case 30: 
          { return symbol(sym.TIgual);
          }
        case 78: break;
        case 32: 
          { return symbol(sym.TMayorIgual);
          }
        case 79: break;
        case 41: 
          { return symbol(sym.TNew);
          }
        case 80: break;
        case 23: 
          { string.append('\\');
          }
        case 81: break;
        case 25: 
          { return symbol(sym.TDecimales,yytext());
          }
        case 82: break;
        case 38: 
          { string.append('\r');
          }
        case 83: break;
        case 57: 
          { return symbol(sym.TSystem);
          }
        case 84: break;
        case 62: 
          { return symbol(sym.TExtends);
          }
        case 85: break;
        case 19: 
          { return symbol(sym.TPyComa);
          }
        case 86: break;
        case 54: 
          { return symbol(sym.TWhile);
          }
        case 87: break;
        case 8: 
          { return symbol(sym.TAsig);
          }
        case 88: break;
        case 39: 
          { return symbol(sym.TStringConst,yytext());
          }
        case 89: break;
        case 5: 
          { return symbol(sym.TIntegerLiteral);
          }
        case 90: break;
        case 1: 
          { throw new RuntimeException("Error caracter inv�lido: <" + yytext() + "> en fila: " + yyline + " columna: " + yycolumn );
       /*throw new Error("Caracter no permitido <"+
                                                    yytext()+">");*/
          }
        case 91: break;
        case 63: 
          { return symbol(sym.TPrintln);
          }
        case 92: break;
        case 7: 
          { return symbol(sym.TNegacion);
          }
        case 93: break;
        case 59: 
          { return symbol(sym.TLength);
          }
        case 94: break;
        case 13: 
          { return symbol(sym.TParIzq);
          }
        case 95: break;
        case 35: 
          { string.append('\"');
          }
        case 96: break;
        case 9: 
          { return symbol(sym.TSuma);
          }
        case 97: break;
        case 17: 
          { return symbol(sym.TCorIzq);
          }
        case 98: break;
        case 3: 
          { return symbol(sym.TDivision);
          }
        case 99: break;
        case 51: 
          { return symbol(sym.TFloat);
          }
        case 100: break;
        case 15: 
          { return symbol(sym.TLlaveIzq);
          }
        case 101: break;
        case 29: 
          { return symbol(sym.TDiferente);
          }
        case 102: break;
        case 22: 
          { yybegin(YYINITIAL); 
                                   return symbol(sym.TStringLiteral, string.toString());
          }
        case 103: break;
        case 47: 
          { return symbol(sym.TExit);
          }
        case 104: break;
        case 43: 
          { return symbol(sym.TTrue);
          }
        case 105: break;
        case 58: 
          { return symbol(sym.TReturn);
          }
        case 106: break;
        case 49: 
          { return symbol(sym.TVoid);
          }
        case 107: break;
        case 40: 
          { return symbol(sym.TInt);
          }
        case 108: break;
        case 36: 
          { string.append('\n');
          }
        case 109: break;
        case 50: 
          { return symbol(sym.TMain);
          }
        case 110: break;
        case 31: 
          { return symbol(sym.TMenorIgual);
          }
        case 111: break;
        case 46: 
          { return symbol(sym.TElse);
          }
        case 112: break;
        case 26: 
          { return symbol(sym.TStringLiteral,yytext());
          }
        case 113: break;
        case 61: 
          { return symbol(sym.TBoolean);
          }
        case 114: break;
        case 4: 
          { return symbol(sym.TMult);
          }
        case 115: break;
        case 24: 
          { return symbol(sym.TID,yytext());
          }
        case 116: break;
        case 52: 
          { return symbol(sym.TFalse);
          }
        case 117: break;
        case 44: 
          { return symbol(sym.TThis);
          }
        case 118: break;
        case 60: 
          { return symbol(sym.TStatic);
          }
        case 119: break;
        case 6: 
          { return symbol(sym.TPunto);
          }
        case 120: break;
        case 10: 
          { return symbol(sym.TResta);
          }
        case 121: break;
        case 53: 
          { return symbol(sym.TClass);
          }
        case 122: break;
        case 20: 
          { return symbol(sym.TComa);
          }
        case 123: break;
        case 34: 
          { return symbol(sym.TY);
          }
        case 124: break;
        case 55: 
          { return symbol(sym.TImport);
          }
        case 125: break;
        case 48: 
          { return symbol(sym.TChar);
          }
        case 126: break;
        case 42: 
          { return symbol(sym.TOut);
          }
        case 127: break;
        case 21: 
          { string.append( yytext() );
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
